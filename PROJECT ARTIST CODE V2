import mysql.connector
from tabulate import tabulate

# Database connection
def get_db_connection():
    try:
        return mysql.connector.connect(
            host='localhost',
            user='root',
            password='admin@123',  # replace with your MySQL password
            database='art_gallery'
        )
    except mysql.connector.Error as e:
        print(f"Error connecting to database: {e}")
        exit()

# Input validation function for integer inputs
def get_int_input(prompt):
    while True:
        try:
            return int(input(prompt))
        except ValueError:
            print("Invalid input. Please enter a valid integer.")

# Input validation function for float inputs
def get_float_input(prompt):
    while True:
        try:
            return float(input(prompt))
        except ValueError:
            print("Invalid input. Please enter a valid number.")

# Function to add an artist
def add_artist():
    name = input("Enter artist's name: ").strip()
    bio = input("Enter artist's bio: ").strip()
    contact_info = input("Enter artist's contact info: ").strip()
    
    if not name or not contact_info:
        print("Name and contact info are required.")
        return

    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO artists (name, bio, contact_info) VALUES (%s, %s, %s)",
            (name, bio, contact_info)
        )
        conn.commit()
        print("Artist added successfully!")
    except mysql.connector.Error as e:
        print(f"Error: {e}")
    finally:
        cursor.close()
        conn.close()

# Function to add an artwork
def add_artwork():
    artist_id = get_int_input("Enter artist ID: ")
    title = input("Enter artwork title: ").strip()
    medium = input("Enter artwork medium: ").strip()
    size = input("Enter artwork size: ").strip()
    creation_date = input("Enter creation date (YYYY-MM-DD): ").strip()
    description = input("Enter artwork description: ").strip()

    if not title or not medium or not size:
        print("Title, medium, and size are required.")
        return

    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO artworks (artist_id, title, medium, size, creation_date, description) VALUES (%s, %s, %s, %s, %s, %s)",
            (artist_id, title, medium, size, creation_date, description)
        )
        conn.commit()
        print("Artwork added successfully!")
    except mysql.connector.Error as e:
        print(f"Error: {e}")
    finally:
        cursor.close()
        conn.close()

# Function to add an exhibition
def add_exhibition():
    title = input("Enter exhibition title: ").strip()
    start_date = input("Enter start date (YYYY-MM-DD): ").strip()
    end_date = input("Enter end date (YYYY-MM-DD): ").strip()
    description = input("Enter exhibition description: ").strip()

    if not title or not start_date or not end_date:
        print("Title and dates are required.")
        return

    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO exhibitions (title, start_date, end_date, description) VALUES (%s, %s, %s, %s)",
            (title, start_date, end_date, description)
        )
        conn.commit()
        print("Exhibition added successfully!")
    except mysql.connector.Error as e:
        print(f"Error: {e}")
    finally:
        cursor.close()
        conn.close()

# Function to add a sale
def add_sale():
    artwork_id = get_int_input("Enter artwork ID: ")
    client_name = input("Enter client name: ").strip()
    sale_date = input("Enter sale date (YYYY-MM-DD): ").strip()
    price = get_float_input("Enter sale price: ")

    if not client_name or not sale_date:
        print("Client name and sale date are required.")
        return

    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO sales (artwork_id, client_name, sale_date, price) VALUES (%s, %s, %s, %s)",
            (artwork_id, client_name, sale_date, price)
        )
        conn.commit()
        print("Sale recorded successfully!")
    except mysql.connector.Error as e:
        print(f"Error: {e}")
    finally:
        cursor.close()
        conn.close()

# Function to delete an artist by ID or name
def delete_artist():
    choice = input("Delete by (1) ID or (2) Name? Enter choice: ").strip()
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        if choice == '1':
            artist_id = get_int_input("Enter artist ID to delete: ")
            cursor.execute("DELETE FROM artists WHERE id = %s", (artist_id,))
        elif choice == '2':
            name = input("Enter artist's name to delete: ").strip()
            cursor.execute("DELETE FROM artists WHERE name = %s", (name,))
        else:
            print("Invalid choice.")
            return

        conn.commit()
        if cursor.rowcount > 0:
            print("Artist deleted successfully!")
        else:
            print("No artist found to delete.")
    except mysql.connector.Error as e:
        print(f"Error: {e}")
    finally:
        cursor.close()
        conn.close()

# Function to search and display artist by ID or name
def search_artist():
    choice = input("Search by (1) ID or (2) Name? Enter choice: ").strip()
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        if choice == '1':
            artist_id = get_int_input("Enter artist ID to search: ")
            cursor.execute("SELECT * FROM artists WHERE id = %s", (artist_id,))
        elif choice == '2':
            name = input("Enter artist's name to search: ").strip()
            cursor.execute("SELECT * FROM artists WHERE name = %s", (name,))
        else:
            print("Invalid choice.")
            return

        artist = cursor.fetchone()
        if artist:
            print(tabulate([artist], headers=["ID", "Name", "Bio", "Contact Info"], tablefmt="pretty"))
        else:
            print("Artist not found.")
    except mysql.connector.Error as e:
        print(f"Error: {e}")
    finally:
        cursor.close()
        conn.close()

# Function to display all details in a table format
def display_all_details():
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        print("\nArtists:")
        cursor.execute("SELECT * FROM artists")
        artists = cursor.fetchall()
        print(tabulate(artists, headers=["ID", "Name", "Bio", "Contact Info"], tablefmt="pretty"))

        print("\nArtworks:")
        cursor.execute("SELECT * FROM artworks")
        artworks = cursor.fetchall()
        print(tabulate(artworks, headers=["ID", "Artist ID", "Title", "Medium", "Size", "Creation Date", "Description"], tablefmt="pretty"))

        print("\nExhibitions:")
        cursor.execute("SELECT * FROM exhibitions")
        exhibitions = cursor.fetchall()
        print(tabulate(exhibitions, headers=["ID", "Title", "Start Date", "End Date", "Description"], tablefmt="pretty"))

        print("\nSales:")
        cursor.execute("SELECT * FROM sales")
        sales = cursor.fetchall()
        print(tabulate(sales, headers=["ID", "Artwork ID", "Client Name", "Sale Date", "Price"], tablefmt="pretty"))

    except mysql.connector.Error as e:
        print(f"Error: {e}")
    finally:
        cursor.close()
        conn.close()

# Main function to interact with the user
def main():
    while True:
        print("\nArt Gallery Management System")
        print("1. Add Artist")
        print("2. Add Artwork")
        print("3. Add Exhibition")
        print("4. Add Sale")
        print("5. Display All Details")
        print("6. Delete Artist")
        print("7. Search Artist by ID or Name")
        print("8. Exit")
        choice = input("Enter your choice: ").strip()

        if choice == '1':
            add_artist()
        elif choice == '2':
            add_artwork()
        elif choice == '3':
            add_exhibition()
        elif choice == '4':
            add_sale()
        elif choice == '5':
            display_all_details()
        elif choice == '6':
            delete_artist()
        elif choice == '7':
            search_artist()
        elif choice == '8':
            print("Exiting... Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == '__main__':
    main()
